{
    "id": 7,
    "account_id": 1,
    "title": "\u30ef\u30fc\u30af\u30d6\u30c3\u30af",
    "deleted_at": null,
    "created_at": "2015-08-04 16:47:24",
    "updated_at": "2015-08-04 16:47:24",
    "snippets": [{
        "id": 46,
        "title": "getchar\u4e71\u7acb\u9632\u6b62",
        "content": "getchar\u3092\u4f7f\u308f\u306a\u3044\u3068\u52d5\u304d\u304c\u6b62\u307e\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u57fa\u672c\u6b62\u3081\u308b\u51e6\u7406\u304c\u306a\u3044\u3068\u6b21\u306b\u9032\u3080\u304b\u3089\u3067\u3059\u3002\n\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u304c\u3042\u308a\u307e\u3059\u3002\n\n    #include<stdio.h>\n    int main(){\n     printf(\"HelloWorld!\\n\");\n        getchar();\n      return 0;\n    }\n\u3053\u306egetchar\u304c\u306a\u3044\u3068\u6b21\u306ereturn 0\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3082\u305d\u3082getchar\u3068\u306f\u6587\u5b57\u306e\u53d6\u5f97\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u5165\u529b\u5f85\u3061\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u7279\u5b9a\u306e\u6642\u9593\u6b62\u3081\u308b\u5834\u5408\u306fsleep\u306a\u3069\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u6b21\u306b\u6587\u5b57\u5165\u529b\u3059\u308b\u95a2\u6570scanf\u3092\u4f7f\u3063\u305f\u4f8b\u3067\u3059\u3002\n\n    #include<stdio.h>\n    int main(){\n        char c[16];\n     printf(\"what's your name?\\n\");\n      scanf(\"%s\",c);\n      printf(\"%s! nice to meet you!\",c);\n      getchar();\n      getchar();  \n        return 0;\n    }\n\u3053\u308c\u306f\u76f8\u624b\u306e\u540d\u524d\u3092\u8fd4\u3059\u3082\u306e\u3067\u3059\u304c\u3001getchar\u304c2\u3064\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306fscanf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u6587\u5b57\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u306e\u3067\u3059\u304c\u3001enter\u30ad\u30fc\u3092\u62bc\u3057\u3066\u5165\u529b\u304c\u7d42\u308f\u3063\u305f\u3068\u304d\u306b\u6539\u884c\u6587\u5b57\u304c\u6b8b\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3089\u3057\u3044\u3067\u3059\u3002\u4eca\u56de\u306f\u307e\u3060\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u30eb\u30fc\u30d7\u3067scanf\u3092\u4f7f\u3046\u5834\u5408\u306f\u305d\u306e\u4f7f\u3063\u305f\u56de\u6570\u3060\u3051getchar\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u3053\u3067getchar\u3092scanf\u306e\u76f4\u5f8c\u306b\u66f8\u304f\u306e\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3002\u6587\u5b57\u5165\u529b\u5f85\u3061\u307e\u3067\u306b\u305d\u306e\u90fd\u5ea6getchar\u3092\u66f8\u304f\u306e\u3082\u3082\u3063\u305f\u3044\u306a\u3044\u3067\u3059\u3002\u305d\u3053\u3067rewind(stdin)\u3092\u4f7f\u3044\u307e\u3059\u3002rewind\u306f\u5f15\u6570\u5185\u3092\u30af\u30ea\u30a2\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6539\u884c\u304c\u6b8b\u308a\u307e\u305b\u3093\u3002\u305d\u308c\u3092\u6b62\u3081\u305f\u3044getchar\u524d\u306b\u4e00\u56de\u66f8\u304f\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n\n    #include<stdio.h>\n    int main(){\n     char c[14];\n     printf(\"\u540d\u524d\u306f\u306a\u3093\u3066\u3044\u3046\u306e\uff1f\\n\");\n     scanf(\"%s\",c);\n      \n        for(int i=0;i<4;i++){\n       printf(\"\u4f55\u3060\u3063\u3066?\");\n        scanf(\"%s\",c);\n      }\n    \n       printf(\"%s!\u3088\u308d\u3057\u304f\u306d!\",c);\n      rewind(stdin);\n      getchar();\n      \n        return 0;\n    }",
        "lang": "jp",
        "account_id": 8,
        "created_at": "2014-12-04 12:19:58",
        "updated_at": "2014-12-04 12:19:58",
        "deleted_at": null,
        "pivot": {
            "workbook_id": 7,
            "snippet_id": 46
        }
    }, {
        "id": 43,
        "title": "C\u8a00\u8a9e\u3067KVS\u30e9\u30a4\u30af\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0",
        "content": "C\u8a00\u8a9e\u3067\u624b\u8efd\u306bKVS\u30e9\u30a4\u30af\u306a\u9759\u7684\u306a\u30c7\u30fc\u30bf\u7ba1\u7406\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7ba1\u7406\u306a\u3069\u306b\u9069\u3057\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n        #include <stdio.h>\n        \n        typedef enum {\n            Debug,\n          Hard,\n           Easy,\n           Normal,\n         Extreme\n        }diff_mode_t;\n        \n        typedef enum {\n          Apple, Orange, Lemon,Human\n        }fruit_t;\n        \n        typedef struct {\n         const char *label;\n          fruit_t fruit;\n          double speed;\n           int norma;\n        }difficulty_t;\n        \n        const char *fruit_name[] = {[Apple]=\"Apple\",[Lemon]=\"Lemon\",[Orange]=\"Orange\",[Human]=\"Human?\"};\n        difficulty_t diffs[]={\n          [Easy]  = {\"Easy\",Lemon,1.0,5},\n         [Normal]    = {\"Normal\",Lemon,10.0,10},\n         [Hard]  = {\"Hard\",Human,20.0,20},\n           [Extreme]   = {\"Are you serious?\",Human,1e100,100},\n         [Debug] = {\"Debug\",Human,1,10}\n        };\n        \n        int main(int argc, char *argv[])\n        {\n           diff_mode_t mode = argc;\n            difficulty_t vals = diffs[mode];\n            printf(\"You choice [%s] (speed:%g)\\n\", vals.label, vals.speed);\n         printf(\"Take %d %s\\n\", vals.norma, fruit_name[vals.fruit]);\n         return 0;\n        }\n        \nC++\u306a\u3069\u306e\u5834\u5408\u306f\u5217\u6319\u578b\u304b\u3089int\u306a\u3069\u3078\u306e\u30ad\u30e3\u30b9\u30c8\u306f\u660e\u3089\u304b\u3067\u306f\u306a\u3044\u306e\u3067\u3001main\u306e\u982d\u3092\n\n    diff_mode_t mode = static_cast< diff_mode_t >(argc);\n\n\u306a\u3069\u3068\u3057\u3066\u304f\u3060\u3055\u3044\u3002(\u305d\u306e\u304b\u308f\u308atypedef\u306f\u3057\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059)\n\n\u203b\u3053\u308c\u306f\u5217\u6319\u578b\u304c0\u304b\u3089\u59cb\u307e\u308b\u3053\u3068\u306b\u983c\u3063\u3066\u3044\u308b\u306e\u3067\u5909\u306b\u3044\u3058\u308b\u3068\u8d85\u5de8\u5927\u306a\u914d\u5217\u30b5\u30a4\u30ba\u304c\u78ba\u4fdd\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u914d\u5217\u5ba3\u8a00\u306e\u3068\u304d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u6307\u5b9a\u304c\u3042\u308b\u3068\u3001\u9806\u756a\u304c\u7570\u306a\u3063\u3066\u3044\u3066\u3082\u3044\u3044\u306e\u3067\u3042\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3002",
        "lang": "jp",
        "account_id": 2,
        "created_at": "2014-12-02 22:40:47",
        "updated_at": "2014-12-03 00:11:56",
        "deleted_at": null,
        "pivot": {
            "workbook_id": 7,
            "snippet_id": 43
        }
    }, {
        "id": 44,
        "title": "\u30d5\u30e9\u30b0\u7ba1\u7406(\u5217\u6319\u578b\/enum)",
        "content": "\u30d5\u30e9\u30b0\u7ba1\u7406\u3092\u5217\u6319\u578b\u3067\u884c\u3046\u3068\uff11\u3064\u306e\u5909\u6570\u3067\u540c\u3058\u7cfb\u7d71\u306e\u30d5\u30e9\u30b0\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u6587\u5b57\u5217\"xy\"\u306a\u3069\u3092\u5165\u529b\u3057\u3066\u30d5\u30e9\u30b0\u30de\u30b9\u30af\u306b\u5fdc\u3058\u305f\u6587\u5b57\u5217\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\n    #include <stdio.h>\n    \n    #define _BV(X) (1<<X)\n    typedef enum {\n        None = 0,\n       X = _BV(0), Y = _BV(1), Z = _BV(2),\n     XY = X|Y, YZ = Y|Z, XZ = X|Z,\n       XYZ = X|Y|Z\n    }enable_flag_t;\n    \n    int get_dimension(enable_flag_t flag){\n        switch (flag) {\n         case X: case Y: case Z:\n             return 1;\n           case XY: case YZ: case XZ:\n              return 2;\n           case XYZ:\n               return 3;\n           case None: default:\n             return 0;\n       }\n    }\n    int main(int argc, char *argv[])\n    {\n     char str[10];\n       enable_flag_t axis = None, mask = YZ;\n    \n       scanf(\"%s\",str);\n        for (int i=0; str[i]!='\\0'; i++) {\n          switch (str[i]) {\n               case 'x': case 'X':\n                 axis |= X; break;\n               case 'y': case 'Y':\n                 axis |= Y; break;\n               case 'z': case 'Z':\n                 axis |= Z; break;\n           }\n       }\n    \n       printf(\"Axis (int)%d -> %d dimension\\n\", axis, get_dimension(axis));\n        if (mask == axis) {\n         printf(\"All Match!\\n\");\n     }else if (mask & axis){\n         printf(\"Partially Match\\n\");\n        }else{\n          printf(\"Not Match\\n\");\n      }\n       return 0;\n    }\n    \n\u5217\u6319\u578b\u3067\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3092\u4f7f\u3046\u3068\u30d5\u30e9\u30b0\u30c1\u30a7\u30c3\u30af\u306b\u8ad6\u7406\u6f14\u7b97\u3082\u4f7f\u3048\u308b\u305f\u3081\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u307e\u305f\u3001switchcase\u3068\u306e\u76f8\u6027\u304c\u975e\u5e38\u306b\u826f\u304f\u3001\u95a2\u6570\u5316\u3059\u308c\u3070return\u3067\u629c\u3051\u308b\u306e\u3067break\u5fd8\u308c\u3082\u884c\u6570\u3082\u6e1b\u3063\u3066\u5e78\u305b\u3067\u3059\u3002\n\n\u203bscanf\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306a\u3069\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306f\u672a\u5b9f\u88c5\u3067\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u5217\u6319\u306e\u540d\u524d\u304c\u885d\u7a81\u3057\u3084\u3059\u3044\u306e\u3067\u5909\u66f4 \u3082\u3057\u304f\u306f\u3001\u540d\u524d\u7a7a\u9593\u3092\u3046\u307e\u304f\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002",
        "lang": "jp",
        "account_id": 2,
        "created_at": "2014-12-02 23:55:43",
        "updated_at": "2014-12-02 23:55:43",
        "deleted_at": null,
        "pivot": {
            "workbook_id": 7,
            "snippet_id": 44
        }
    }]
}